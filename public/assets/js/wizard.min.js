"use strict";

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _defineProperties(target, props) {
    for (let i = 0; i < props.length; i++) {
        const descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}

function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
        writable: false
    });
    return Constructor;
}

var Wizard = /*#__PURE__*/(function () {
    function Wizard(selector, options = {}) {
        _classCallCheck(this, Wizard);

        this.wizard = selector instanceof HTMLElement ? selector : document.querySelector(selector);
        if (!this.wizard) {
            console.warn("Wizard element not found:", selector);
            return;
        }

        this.validate = !!options.validate;
        this.buttons = !!options.buttons;
        this.progress = !!options.progress;

        this.initOptions();
        this.initEventListener();
    }

    return _createClass(Wizard, [
        {
            key: "initOptions",
            value: function () {
                this.selectedIndex = 0;
                this.progressBar = this.progress ? this.wizard.querySelector(".tab-content .progress .progress-bar") : null;
                this.navItems = this.wizard.querySelectorAll("ul li.nav-item a") || [];
                this.tabPans = this.wizard.querySelectorAll(".tab-content .tab-pane") || [];

                this.initButtons();
                this.showTabSelectedTab();
            }
        },
        {
            key: "initButtons",
            value: function () {
                if (this.buttons) {
                    this.prevBtn = this.wizard.querySelector(".tab-content .button-previous");
                    this.nextBtn = this.wizard.querySelector(".tab-content .button-next");
                    this.firstBtn = this.wizard.querySelector(".tab-content .button-first");
                    this.lastBtn = this.wizard.querySelector(".tab-content .button-last");
                } else {
                    this.prevBtn = this.wizard.querySelector(".tab-content .previous a");
                    this.nextBtn = this.wizard.querySelector(".tab-content .next a");
                    this.firstBtn = this.wizard.querySelector(".tab-content .first a");
                    this.lastBtn = this.wizard.querySelector(".tab-content .last a");
                }
            }
        },
        {
            key: "initEventListener",
            value: function () {
                const self = this;

                if (self.prevBtn) {
                    self.prevBtn.addEventListener("click", function (e) {
                        e.preventDefault();
                        if (self.selectedIndex > 0 && self.validateForm()) {
                            self.selectedIndex--;
                            self.showTabSelectedTab();
                        }
                    });
                }

                if (self.nextBtn) {
                    self.nextBtn.addEventListener("click", function (e) {
                        e.preventDefault();
                        if (self.selectedIndex < self.navItems.length - 1 && self.validateForm()) {
                            self.selectedIndex++;
                            self.showTabSelectedTab();
                        }
                    });
                }

                if (self.firstBtn) {
                    self.firstBtn.addEventListener("click", function (e) {
                        e.preventDefault();
                        if (self.selectedIndex !== 0 && self.validateForm()) {
                            self.selectedIndex = 0;
                            self.showTabSelectedTab();
                        }
                    });
                }

                if (self.lastBtn) {
                    self.lastBtn.addEventListener("click", function (e) {
                        e.preventDefault();
                        if (self.selectedIndex !== self.navItems.length - 1 && self.validateForm()) {
                            self.selectedIndex = self.navItems.length - 1;
                            self.showTabSelectedTab();
                        }
                    });
                }

                self.navItems.forEach(function (item, index) {
                    item.addEventListener("click", function (e) {
                        e.preventDefault();
                        if (self.validateForm()) {
                            self.selectedIndex = index;
                            self.showTabSelectedTab();
                        }
                    });
                });
            }
        },
        {
            key: "showTabSelectedTab",
            value: function () {
                if (this.navItems[this.selectedIndex]) {
                    new bootstrap.Tab(this.navItems[this.selectedIndex]).show();
                }

                if (this.progressBar) {
                    const percent = ((this.selectedIndex + 1) / this.navItems.length) * 100;
                    this.progressBar.style.width = percent + "%";
                }

                this.changeBtnStyle();
            }
        },
        {
            key: "changeBtnStyle",
            value: function () {
                const disable = (btn) => btn && btn.classList.add("disabled");
                const enable = (btn) => btn && btn.classList.remove("disabled");

                enable(this.firstBtn);
                enable(this.lastBtn);
                enable(this.nextBtn);
                enable(this.prevBtn);

                if (this.selectedIndex === 0) {
                    disable(this.firstBtn);
                    disable(this.prevBtn);
                }

                if (this.selectedIndex === this.navItems.length - 1) {
                    disable(this.nextBtn);
                    disable(this.lastBtn);
                }
            }
        },
        {
            key: "validateForm",
            value: function () {
                if (this.validate && this.tabPans[this.selectedIndex]) {
                    const form = this.tabPans[this.selectedIndex].querySelector("form");
                    if (form) {
                        form.classList.add("was-validated");
                        return form.checkValidity();
                    }
                }
                return true;
            }
        }
    ]);
})();
